{"uid":"f5acb02937e1a009","name":"Создание курьера: отсутствие полей, пустые значения и null","fullName":"tests.test_сratinga_courier.TestCreatingCourier#test_invalid_create_cour","historyId":"97289f1473bde1d7ddd9b5fd53a80986","time":{"start":1760439198329,"stop":1760439198746,"duration":417},"description":"Тест негативное тестирование создания курьера. Проверяются варианты: отсутствие полей, передача пустых строк, установка null значений","descriptionHtml":"<p>Тест негативное тестирование создания курьера. Проверяются варианты: отсутствие полей, передача пустых строк, установка null значений</p>\n","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получили 201\nassert 201 == 400\n +  where 201 = <Response [201]>.status_code","statusTrace":"self = <test_сratinga_courier.TestCreatingCourier object at 0x000001D650D5F3E0>, login = 'demjan01', password = '12345', first_name = None\n\n    @allure.title('Создание курьера: отсутствие полей, пустые значения и null')\n    @allure.description('Тест негативное тестирование создания курьера. Проверяются варианты: отсутствие полей, передача пустых строк, установка null значений')\n    @pytest.mark.parametrize(\"login, password, first_name\", CreateCourier.test_data)\n    def test_invalid_create_cour(self, login, password, first_name):\n        test_case = f\"login={login}, password={password}, first_name={first_name}\"\n    \n        with allure.step(f\"Тестовый случай: {test_case}\"):\n            with allure.step(\"Генерируем и модификация уникальные данные курьера\"):\n                data = CreateCourier.generate_unique_courier()\n                data = CreateCourier.invalid_data(data, \"login\", login)\n                data = CreateCourier.invalid_data(data, \"password\", password)\n                data = CreateCourier.invalid_data(data, \"firstName\", first_name)\n    \n            with allure.step(\"Отправка запроса и валидация\"):\n                response = requests.post(f'{Url.url}{Url.create_courier}', json=data)\n>               assert response.status_code == 400, f\"Ожидался статус 400, но получили {response.status_code}\"\nE               AssertionError: Ожидался статус 400, но получили 201\nE               assert 201 == 400\nE                +  where 201 = <Response [201]>.status_code\n\ntests\\test_сratinga_courier.py:60: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1760438909140,"stop":1760438909179,"duration":39},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentStep":false,"attachmentsCount":0,"stepsCount":0}],"testStage":{"description":"Тест негативное тестирование создания курьера. Проверяются варианты: отсутствие полей, передача пустых строк, установка null значений","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получили 201\nassert 201 == 400\n +  where 201 = <Response [201]>.status_code","statusTrace":"self = <test_сratinga_courier.TestCreatingCourier object at 0x000001D650D5F3E0>, login = 'demjan01', password = '12345', first_name = None\n\n    @allure.title('Создание курьера: отсутствие полей, пустые значения и null')\n    @allure.description('Тест негативное тестирование создания курьера. Проверяются варианты: отсутствие полей, передача пустых строк, установка null значений')\n    @pytest.mark.parametrize(\"login, password, first_name\", CreateCourier.test_data)\n    def test_invalid_create_cour(self, login, password, first_name):\n        test_case = f\"login={login}, password={password}, first_name={first_name}\"\n    \n        with allure.step(f\"Тестовый случай: {test_case}\"):\n            with allure.step(\"Генерируем и модификация уникальные данные курьера\"):\n                data = CreateCourier.generate_unique_courier()\n                data = CreateCourier.invalid_data(data, \"login\", login)\n                data = CreateCourier.invalid_data(data, \"password\", password)\n                data = CreateCourier.invalid_data(data, \"firstName\", first_name)\n    \n            with allure.step(\"Отправка запроса и валидация\"):\n                response = requests.post(f'{Url.url}{Url.create_courier}', json=data)\n>               assert response.status_code == 400, f\"Ожидался статус 400, но получили {response.status_code}\"\nE               AssertionError: Ожидался статус 400, но получили 201\nE               assert 201 == 400\nE                +  where 201 = <Response [201]>.status_code\n\ntests\\test_сratinga_courier.py:60: AssertionError","steps":[{"name":"Тестовый случай: login=demjan01, password=12345, first_name=None","time":{"start":1760439198329,"stop":1760439198745,"duration":416},"status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получили 201\nassert 201 == 400\n +  where 201 = <Response [201]>.status_code\n","statusTrace":"  File \"C:\\Users\\ilua2\\project\\qa_Sprint_7\\tests\\test_сratinga_courier.py\", line 60, in test_invalid_create_cour\n    assert response.status_code == 400, f\"Ожидался статус 400, но получили {response.status_code}\"\n","steps":[{"name":"Генерируем и модификация уникальные данные курьера","time":{"start":1760439198329,"stop":1760439198329,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentStep":false,"attachmentsCount":0,"stepsCount":0},{"name":"Отправка запроса и валидация","time":{"start":1760439198329,"stop":1760439198744,"duration":415},"status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получили 201\nassert 201 == 400\n +  where 201 = <Response [201]>.status_code\n","statusTrace":"  File \"C:\\Users\\ilua2\\project\\qa_Sprint_7\\tests\\test_сratinga_courier.py\", line 60, in test_invalid_create_cour\n    assert response.status_code == 400, f\"Ожидался статус 400, но получили {response.status_code}\"\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentStep":false,"attachmentsCount":0,"stepsCount":0}],"attachments":[],"parameters":[],"hasContent":true,"shouldDisplayMessage":false,"attachmentStep":false,"attachmentsCount":0,"stepsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentStep":false,"attachmentsCount":0,"stepsCount":3},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_сratinga_courier"},{"name":"subSuite","value":"TestCreatingCourier"},{"name":"host","value":"Ilya_Volkov"},{"name":"thread","value":"5776-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_сratinga_courier"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"first_name","value":"None"},{"name":"login","value":"'demjan01'"},{"name":"password","value":"'12345'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"f5acb02937e1a009.json","parameterValues":["None","'demjan01'","'12345'"]}