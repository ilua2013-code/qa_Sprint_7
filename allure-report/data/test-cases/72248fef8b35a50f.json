{"uid":"72248fef8b35a50f","name":"Удаление курьера без параметров","fullName":"tests.test_delet_courier.TestDeleteCourier#test_delete_courier_without_parameters","historyId":"ad90a0b6211fa4f083880c240bc317ff","time":{"start":1760438911212,"stop":1760438911561,"duration":349},"description":"Тест неуспешный запрос без ID возвращает соответствующую ошибку","descriptionHtml":"<p>Тест неуспешный запрос без ID возвращает соответствующую ошибку</p>\n","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получили 404\nassert 404 == 400\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <test_delet_courier.TestDeleteCourier object at 0x000001D650EA1310>\n\n    @allure.title('Удаление курьера без параметров')\n    @allure.description('Тест неуспешный запрос без ID возвращает соответствующую ошибку')\n    def test_delete_courier_without_parameters(self):\n        with allure.step(\"Отправляем запрос на удаление без параметров\"):\n            data = {}\n            response = requests.delete(f'{Url.url}{Url.del_courier[:-1]}', json=data)\n    \n        with allure.step(\"Проверяем ошибку 400\"):\n>           assert response.status_code == 400, f\"Ожидался статус 400, но получили {response.status_code}\"\nE           AssertionError: Ожидался статус 400, но получили 404\nE           assert 404 == 400\nE            +  where 404 = <Response [404]>.status_code\n\ntests\\test_delet_courier.py:15: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1760438909140,"stop":1760438909179,"duration":39},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentStep":false,"attachmentsCount":0,"stepsCount":0}],"testStage":{"description":"Тест неуспешный запрос без ID возвращает соответствующую ошибку","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получили 404\nassert 404 == 400\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <test_delet_courier.TestDeleteCourier object at 0x000001D650EA1310>\n\n    @allure.title('Удаление курьера без параметров')\n    @allure.description('Тест неуспешный запрос без ID возвращает соответствующую ошибку')\n    def test_delete_courier_without_parameters(self):\n        with allure.step(\"Отправляем запрос на удаление без параметров\"):\n            data = {}\n            response = requests.delete(f'{Url.url}{Url.del_courier[:-1]}', json=data)\n    \n        with allure.step(\"Проверяем ошибку 400\"):\n>           assert response.status_code == 400, f\"Ожидался статус 400, но получили {response.status_code}\"\nE           AssertionError: Ожидался статус 400, но получили 404\nE           assert 404 == 400\nE            +  where 404 = <Response [404]>.status_code\n\ntests\\test_delet_courier.py:15: AssertionError","steps":[{"name":"Отправляем запрос на удаление без параметров","time":{"start":1760438911212,"stop":1760438911559,"duration":347},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentStep":false,"attachmentsCount":0,"stepsCount":0},{"name":"Проверяем ошибку 400","time":{"start":1760438911559,"stop":1760438911560,"duration":1},"status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получили 404\nassert 404 == 400\n +  where 404 = <Response [404]>.status_code\n","statusTrace":"  File \"C:\\Users\\ilua2\\project\\qa_Sprint_7\\tests\\test_delet_courier.py\", line 15, in test_delete_courier_without_parameters\n    assert response.status_code == 400, f\"Ожидался статус 400, но получили {response.status_code}\"\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentStep":false,"attachmentsCount":0,"stepsCount":0}],"attachments":[],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentStep":false,"attachmentsCount":0,"stepsCount":2},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_delet_courier"},{"name":"subSuite","value":"TestDeleteCourier"},{"name":"host","value":"Ilya_Volkov"},{"name":"thread","value":"5776-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_delet_courier"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"72248fef8b35a50f.json","parameterValues":[]}